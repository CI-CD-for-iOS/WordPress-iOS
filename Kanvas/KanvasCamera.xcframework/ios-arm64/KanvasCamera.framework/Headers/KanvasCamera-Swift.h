// Generated by Apple Swift version 5.3 effective-4.2 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef KANVASCAMERA_SWIFT_H
#define KANVASCAMERA_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KanvasCamera",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif







@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC12KanvasCamera16CameraController")
@interface CameraController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use init(settings:) instead");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use init(settings:) instead");
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) UIStatusBarAnimation preferredStatusBarUpdateAnimation;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@end


/// Camera Modes available
/// <ul>
///   <li>
///     photo: Capturing photos
///   </li>
///   <li>
///     stopMotion: Capturing stop motions, a sequence of images and/or videos
///   </li>
///   <li>
///     loop: Capturing gifs, a sequence of photos
///   </li>
///   <li>
///     normal: Capturing single photo or single video
///   </li>
///   <li>
///     stitch: Capturing stop motions, a sequence of images and/or videos
///   </li>
///   <li>
///     gif: Capturing gifs, a sequence of photos
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, CameraMode, open) {
  CameraModeStopMotion = 0,
  CameraModePhoto = 1,
  CameraModeLoop = 2,
  CameraModeNormal = 3,
  CameraModeStitch = 4,
  CameraModeGif = 5,
};


SWIFT_CLASS("_TtC12KanvasCamera14CameraSettings")
@interface CameraSettings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIColor;

SWIFT_CLASS("_TtC12KanvasCamera11EasyTipView")
@interface EasyTipView : UIView
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// NSCoding not supported. Use init(text, preferences, delegate) instead!
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface EasyTipView (SWIFT_EXTENSION(KanvasCamera)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end



/// A view controller to edit the segments
SWIFT_CLASS("_TtC12KanvasCamera20EditorViewController")
@interface EditorViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use init(settings:, segments:) instead");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use init(settings:, segments:) instead");
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@end

/// Filter types
typedef SWIFT_ENUM(NSInteger, FilterType, open) {
  FilterTypePassthrough = 0,
  FilterTypeWavePool = 1,
  FilterTypePlasma = 2,
  FilterTypeEmInterference = 3,
  FilterTypeRgb = 4,
  FilterTypeLego = 5,
  FilterTypeChroma = 6,
  FilterTypeRave = 7,
  FilterTypeMirrorTwo = 8,
  FilterTypeMirrorFour = 9,
  FilterTypeLightLeaks = 10,
  FilterTypeFilm = 11,
  FilterTypeGrayscale = 12,
  FilterTypeManga = 13,
  FilterTypeToon = 14,
  FilterTypeOff = 15,
};

typedef SWIFT_ENUM(NSInteger, KanvasBrushType, open) {
  KanvasBrushTypePencil = 0,
  KanvasBrushTypeMarker = 1,
  KanvasBrushTypeSharpie = 2,
};

enum KanvasMediaType : NSInteger;
enum KanvasColorSelectionTool : NSInteger;
enum KanvasDrawingAction : NSInteger;
enum KanvasTextFont : NSInteger;
enum KanvasTextAlignment : NSInteger;
enum KanvasDashboardOpenAction : NSInteger;
enum KanvasDashboardDismissAction : NSInteger;
enum KanvasGIFPlaybackMode : NSInteger;

/// A protocol for injecting analytics into the KanvasCamera module
SWIFT_PROTOCOL("_TtP12KanvasCamera29KanvasCameraAnalyticsProvider_")
@protocol KanvasCameraAnalyticsProvider
/// Logs an event when the camera is opened
/// \param mode what photo mode was opened
///
- (void)logCameraOpenWithMode:(enum CameraMode)mode;
/// Logs an event when the camera is dismissed without exporting media
- (void)logDismiss;
/// Logs an event when media is captured
/// \param type the camera mode used to capture media.
///
/// \param cameraPosition the back or front camera
///
/// \param length the duration of the video created, in seconds
///
/// \param ghostFrameEnabled whether the ghost frame feature is enabled or not
///
/// \param filterType what filter was applied when capturing media. nil when feature is disabled
///
- (void)logCapturedMediaWithType:(enum CameraMode)type cameraPosition:(AVCaptureDevicePosition)cameraPosition length:(NSTimeInterval)length ghostFrameEnabled:(BOOL)ghostFrameEnabled filterType:(enum FilterType)filterType;
/// Logs an event when the flip camera button is tapped
- (void)logFlipCamera;
/// Logs an event when a segment is deleted
- (void)logDeleteSegment;
/// Logs an event when the flash button is tapped
- (void)logFlashToggled;
/// Logs an event when the image preview button is tapped
- (void)logImagePreviewToggledWithEnabled:(BOOL)enabled;
/// Logs an event when the undo button is tapped
- (void)logUndoTapped;
/// Logs an event when the preview button is tapped
- (void)logNextTapped;
/// Logs an event if the preview screen is closed without exporting media
- (void)logPreviewDismissed;
/// Logs an event when a media clip is moved
- (void)logMovedClip;
/// Logs an event when the user pinches to zoom
- (void)logPinchedZoom;
/// Logs an event when the user swipes up while recording to zoom
- (void)logSwipedZoom;
/// Logs an event when the confirm button is tapped
/// \param mode the mode used to create the media
///
/// \param clipsCount the number of clips used, if a video
///
/// \param length the duration of the video created, in seconds
///
- (void)logConfirmedMediaWithMode:(enum CameraMode)mode clipsCount:(NSInteger)clipsCount length:(NSTimeInterval)length;
/// Logs an event when the filters selector is opened
- (void)logOpenFiltersSelector;
/// Logs an event when a filter is selected
/// \param filterType The selected filter
///
- (void)logFilterSelectedWithFilterType:(enum FilterType)filterType;
- (void)logMediaPickerOpen;
- (void)logMediaPickerDismiss;
- (void)logMediaPickerPickedMediaOfType:(enum KanvasMediaType)mediaType;
- (void)logEditorOpen;
- (void)logEditorBack;
/// Logs an event when the filters button is tapped in the editor
- (void)logEditorFiltersOpen;
/// Logs an event when a filter is selected in the editor
- (void)logEditorFilterSelectedWithFilterType:(enum FilterType)filterType;
/// Logs an event when the drawing button is tapped in the editor
- (void)logEditorDrawingOpen;
/// Logs an event when the stroke size is changed
/// \param strokeSize the size of the stroke, between 0 and 1
///
- (void)logEditorDrawingChangeStrokeSizeWithStrokeSize:(float)strokeSize;
/// Logs an event when the brush is changed
/// \param brushType the brush that was selected
///
- (void)logEditorDrawingChangeBrushWithBrushType:(enum KanvasBrushType)brushType;
/// Logs an event when someone selects a color
/// \param selectionTool the color selection tool used
///
- (void)logEditorDrawingChangeColorWithSelectionTool:(enum KanvasColorSelectionTool)selectionTool;
/// Logs an event when someone draws
/// \param brushType the brush that was selected
///
/// \param strokeSize the size of the stroke, between 0 and 1
///
/// \param drawType the type of drawing action performed
///
- (void)logEditorDrawStrokeWithBrushType:(enum KanvasBrushType)brushType strokeSize:(float)strokeSize drawType:(enum KanvasDrawingAction)drawType;
/// Logs an event when someone undoes a drawing or erasing action
- (void)logEditorDrawingUndo;
/// Logs an event when someone uses the eraser
/// \param brushType the brush that was selected
///
/// \param strokeSize the size of the stroke, between 0 and 1
///
/// \param drawType the type of erasing action performed
///
- (void)logEditorDrawingEraserWithBrushType:(enum KanvasBrushType)brushType strokeSize:(float)strokeSize drawType:(enum KanvasDrawingAction)drawType;
/// Logs an event when someone confirms drawing
- (void)logEditorDrawingConfirm;
/// Logs an event when tapping the text tool to add a new text overlay
- (void)logEditorTextAdd;
/// Logs an event when tapping on an existing text overlay to edit it
- (void)logEditorTextEdit;
/// Logs an event when a text overlay is confirmed
/// \param isNew whether this text overlay is newly added or not
///
/// \param font the font
///
/// \param alignment the text alignment
///
/// \param highlighted whether the text is highlighted or not
///
- (void)logEditorTextConfirmWithIsNew:(BOOL)isNew font:(enum KanvasTextFont)font alignment:(enum KanvasTextAlignment)alignment highlighted:(BOOL)highlighted;
/// Logs an event when a text overlay is moved
- (void)logEditorTextMove;
/// Logs an event when a text overlay is removed
- (void)logEditorTextRemove;
/// Logs an event when the font is changed
/// \param font the font
///
- (void)logEditorTextChangeWithFont:(enum KanvasTextFont)font;
/// Logs an event when the text alignment is changed
/// \param alignment the text alignment
///
- (void)logEditorTextChangeWithAlignment:(enum KanvasTextAlignment)alignment;
/// Logs an event when the text highlight is changed
/// \param highlighted whether the text is highlighted
///
- (void)logEditorTextChangeWithHighlighted:(BOOL)highlighted;
/// Logs an event when the text color changes
/// \param color Always true
///
- (void)logEditorTextChangeWithColor:(BOOL)color;
/// Logs an event when media is created from the editor
- (void)logEditorCreatedMediaWithClipsCount:(NSInteger)clipsCount length:(NSTimeInterval)length;
/// Logs an event when Kanvas is opened from the Dashboard
/// \param openAction the way Kanvas was opened - either a swipe or a tap
///
- (void)logOpenFromDashboardWithOpenAction:(enum KanvasDashboardOpenAction)openAction;
/// Logs an event when Kanvas is dismissed from the Dashboard
/// \param dismissAction the way Kanvas was dismissed - either a swipe or a tap
///
- (void)logDismissFromDashboardWithDismissAction:(enum KanvasDashboardDismissAction)dismissAction;
/// Logs when someone posts from Kanvas
- (void)logPostFromDashboard;
/// Logs when someone changes the blog to post to
- (void)logChangeBlogForPostFromDashboard;
/// Logs when someone only saves media from Kanvas
- (void)logSaveFromDashboard;
/// Logs when someone opens compose from Kanvas
- (void)logOpenComposeFromDashboard;
/// Logs when someone taps the tag button in the Editor
- (void)logEditorTagTapped;
/// Logs when the Create icon is presented in the Dashboard header
- (void)logIconPresentedOnDashboard;
/// Logs when the Media Drawer is opened
- (void)logEditorMediaDrawerOpen;
/// Logs when the Media Drawer is closed
- (void)logEditorMediaDrawerClosed;
/// Logs when the stickers tab is selected in the Media Drawer
- (void)logEditorMediaDrawerSelectStickers;
/// Logs when a sticker pack is selected in the Media Drawer
/// \param stickerPackId the ID of the sticker pack that was selected
///
- (void)logEditorStickerPackSelectWithStickerPackId:(NSString * _Nonnull)stickerPackId;
/// Logs when a sticker is added in the canvas
/// \param stickerId the ID of the sticker that was added
///
- (void)logEditorStickerAddWithStickerId:(NSString * _Nonnull)stickerId;
/// Logs when a sticker is removed from the canvas
/// \param stickerId the ID of the sticker that was removed
///
- (void)logEditorStickerRemoveWithStickerId:(NSString * _Nonnull)stickerId;
/// Logs when a sticker is moved through the canvas
/// \param stickerId the ID of the sticker that was moved
///
- (void)logEditorStickerMoveWithStickerId:(NSString * _Nonnull)stickerId;
- (void)logEditorGIFButtonToggle:(BOOL)value;
- (void)logEditorGIFOpen;
- (void)logEditorGIFOpenTrim;
- (void)logEditorGIFOpenSpeed;
- (void)logEditorGIFRevert;
- (void)logEditorGIFConfirmWithDuration:(NSTimeInterval)duration playbackMode:(enum KanvasGIFPlaybackMode)playbackMode speed:(float)speed;
- (void)logEditorGIFChangeWithPlaybackMode:(enum KanvasGIFPlaybackMode)playbackMode;
- (void)logEditorGIFChangeWithSpeed:(float)speed;
- (void)logEditorGIFChangeWithTrimStart:(NSTimeInterval)trimStart trimEnd:(NSTimeInterval)trimEnd;
/// Logs when the “next” button that opens APO is pressed in the Editor
/// \param page page presenting the post options
///
- (void)logAdvancedOptionsOpenWithPage:(NSString * _Nonnull)page;
@end

typedef SWIFT_ENUM(NSInteger, KanvasColorSelectionTool, open) {
  KanvasColorSelectionToolSwatch = 0,
  KanvasColorSelectionToolGradient = 1,
  KanvasColorSelectionToolEyedropper = 2,
};

typedef SWIFT_ENUM(NSInteger, KanvasDashboardDismissAction, open) {
  KanvasDashboardDismissActionTap = 0,
  KanvasDashboardDismissActionSwipe = 1,
};

typedef SWIFT_ENUM(NSInteger, KanvasDashboardOpenAction, open) {
  KanvasDashboardOpenActionTap = 0,
  KanvasDashboardOpenActionSwipe = 1,
};

typedef SWIFT_ENUM(NSInteger, KanvasDrawingAction, open) {
  KanvasDrawingActionTap = 0,
  KanvasDrawingActionFill = 1,
  KanvasDrawingActionStroke = 2,
};

typedef SWIFT_ENUM(NSInteger, KanvasGIFPlaybackMode, open) {
  KanvasGIFPlaybackModeLoop = 0,
  KanvasGIFPlaybackModeRebound = 1,
  KanvasGIFPlaybackModeReverse = 2,
};

typedef SWIFT_ENUM(NSInteger, KanvasMediaType, open) {
  KanvasMediaTypeImage = 0,
  KanvasMediaTypeVideo = 1,
  KanvasMediaTypeFrames = 2,
  KanvasMediaTypeLivePhoto = 3,
};

typedef SWIFT_ENUM(NSInteger, KanvasTextAlignment, open) {
  KanvasTextAlignmentLeft = 0,
  KanvasTextAlignmentCenter = 1,
  KanvasTextAlignmentRight = 2,
};

typedef SWIFT_ENUM(NSInteger, KanvasTextFont, open) {
  KanvasTextFontRegular = 0,
  KanvasTextFontScript = 1,
};






@interface UIColor (SWIFT_EXTENSION(KanvasCamera))
/// Create UIColor from the given hex Integer
/// note:
/// Method is used to bridge objc without a large multi file rewrite
/// \param hex Int value to be converted to UIColor
///
+ (UIColor * _Nonnull)colorWithHex:(NSUInteger)hex SWIFT_WARN_UNUSED_RESULT;
@end


















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
